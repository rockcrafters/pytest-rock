name: OCI Factory Workflows - Build pytest Rock

on:
  push:
    branches:
      - main

jobs:
  prepare-build:
    runs-on: ubuntu-latest
    outputs:
      img-version: ${{ steps.validate-image.outputs.img-version }}
      rockfile-directory: ${{ steps.validate-image.outputs.rockfile-directory }}
    steps:
      - uses: actions/checkout@v4

      - name: Changed files
        uses: tj-actions/changed-files@531f5f7d163941f0c1c04e0ff4d8bb243ac4366f
        id: changed-files
        with:
          separator: ","
          dir_names: "true"
          files: |
            */rockcraft.y*ml

      - name: Validate image from dispatch
        id: validate-image
        run: |
          set -ex
          img_path="${{ steps.changed-files.outputs.all_changed_files }}"
          occurrences="${img_path//[^,]}"
          if [ ${#occurrences} -ne 0 ]
          then
            echo "ERR: can only build 1 image at a time, but trying to trigger ${img_path}"
            exit 1
          fi
          test -d "${img_path}"

          echo "img-version=$(echo "${img_path}" | cut -d '/' -f 1)" >> "$GITHUB_OUTPUT"
          echo "rockfile-directory=$(echo "${img_path}" | rev | cut -d '/' -f 2- | rev)" >> "$GITHUB_OUTPUT"


  build:
    needs: [prepare-build]
    uses: canonical/oci-factory/.github/workflows/Build-Rock.yaml@main
    with:
      oci-archive-name: "pytest-rock"
      rock-repo: rockcrafters/pytest-rock
      rock-repo-commit: main
      rockfile-directory: "${{ needs.prepare-build.outputs.rockfile-directory }}"
      arch-map: '{"amd64": ["ubuntu-latest"], "arm64": ["ubuntu-24.04-arm"]}'

  publish:
    needs: [prepare-build, build]
    runs-on: ubuntu-latest
    steps:
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - uses: actions/download-artifact@v4
        with:
          name: pytest-rock

      - name: 'Set up skopeo'
        uses: warjiang/setup-skopeo@main
        with:
          version: latest

      - name: 'Load image into docker daemon'
        run: skopeo copy oci-archive:pytest-rock docker-daemon:pytest:latest

      - name: 'Get pytest version number'
        id: 'pytest-version'
        run: |
          echo "pytest-version=$(docker run --rm pytest:latest exec python3 -c "import pytest;print(pytest.__version__)")" >> "$GITHUB_OUTPUT"

      - run: skopeo copy --multi-arch all oci-archive:pytest-rock docker://ghcr.io/rockcrafters/pytest-rock/pytest:${{ steps.pytest-version.outputs.pytest-version }}
